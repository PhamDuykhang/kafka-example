// Code generated by MockGen. DO NOT EDIT.
// Source: greet.go

// Package repo_mock is a generated GoMock package.
package repo_mock

import (
	types "github.com/PhamDuyKhang/kafkaexamples/testdemo/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGreetRepository is a mock of GreetRepository interface
type MockGreetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGreetRepositoryMockRecorder
}

// MockGreetRepositoryMockRecorder is the mock recorder for MockGreetRepository
type MockGreetRepositoryMockRecorder struct {
	mock *MockGreetRepository
}

// NewMockGreetRepository creates a new mock instance
func NewMockGreetRepository(ctrl *gomock.Controller) *MockGreetRepository {
	mock := &MockGreetRepository{ctrl: ctrl}
	mock.recorder = &MockGreetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGreetRepository) EXPECT() *MockGreetRepositoryMockRecorder {
	return m.recorder
}

// FindWordByName mocks base method
func (m *MockGreetRepository) FindWordByName(name string) types.Greeting {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWordByName", name)
	ret0, _ := ret[0].(types.Greeting)
	return ret0
}

// FindWordByName indicates an expected call of FindWordByName
func (mr *MockGreetRepositoryMockRecorder) FindWordByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWordByName", reflect.TypeOf((*MockGreetRepository)(nil).FindWordByName), name)
}

// GetAllSentence mocks base method
func (m *MockGreetRepository) GetAllSentence() []types.Greeting {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSentence")
	ret0, _ := ret[0].([]types.Greeting)
	return ret0
}

// GetAllSentence indicates an expected call of GetAllSentence
func (mr *MockGreetRepositoryMockRecorder) GetAllSentence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSentence", reflect.TypeOf((*MockGreetRepository)(nil).GetAllSentence))
}

// GetOne mocks base method
func (m *MockGreetRepository) GetOne() types.Greeting {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne")
	ret0, _ := ret[0].(types.Greeting)
	return ret0
}

// GetOne indicates an expected call of GetOne
func (mr *MockGreetRepositoryMockRecorder) GetOne() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockGreetRepository)(nil).GetOne))
}
